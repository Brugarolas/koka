module parc/parc4
private import std/core/types = std/core/types = "";
private import std/core/hnd = std/core/hnd = "";
private import std/core = std/core = "";
public fun test : (xs : list<std/core/types/maybe<std/core/types/int>>, y : std/core/types/int) -> std/core/types/int
 = fun(xs: list<std/core/types/maybe<std/core/types/int>>, y: std/core/types/int){
 match (xs) {
 (std/core/Cons(((.skip std/core/types/.Box(((std/core/types/Just(((.skip std/core/types/.Box((x: std/core/types/int)) : std/core/types/.Box ) as .box-x49
 : std/core/types/.Box)) : std/core/types/maybe<std/core/types/int> ) as .pat0: std/core/types/maybe<std/core/types/int>)) : std/core/types/.Box ) as 
 .box-x48: std/core/types/.Box), (.pat1: list<std/core/types/maybe<std/core/types/int>>)) : list<std/core/types/maybe<std/core/types/int>> )
 | std/core/(==.1)((std/core/types/.dup(x)), (std/core/types/.dup(y))) -> val _ : ()
 = std/core/types/.drop(y);
 val _ : ()
 = (match ((std/core/types/.is-unique(xs))) {
 (std/core/types/True() : std/core/types/bool )
 -> val _ : ()
 = std/core/types/.drop(.pat1);
 val _ : ()
 = std/core/types/.dup(x);
 std/core/types/.drop(.box-x48, (std/core/int32(1)));
 std/core/types/.free(xs);
 _
 -> std/core/types/.dup(x);
 std/core/types/.dec-ref(xs);
 });
 x;
 (std/core/Cons(((.skip std/core/types/.Box(((std/core/types/Nothing() : std/core/types/maybe<std/core/types/int> ) as .pat3: std/core/types/maybe<
 std/core/types/int>)) : std/core/types/.Box ) as .box-x50: std/core/types/.Box), (.pat4: list<std/core/types/maybe<std/core/types/int>>)) : list<
 std/core/types/maybe<std/core/types/int>> )
 -> val _ : ()
 = std/core/types/.drop(xs, (std/core/int32(3)));
 val _ : ()
 = std/core/types/.drop(y);
 2;
 _
 -> std/core/types/.drop(xs);
 y;
 }
 };
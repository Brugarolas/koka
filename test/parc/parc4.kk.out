module parc/parc4
private import std/core/types = std/core/types = "";
private import std/core/hnd = std/core/hnd = "";
private import std/core = std/core = "";
public fun test : (xs : list<maybe<int>>, y : int) -> int
 = fun(xs: list<maybe<int>>, y: int){
 match (xs) {
 (std/core/Cons(((.skip std/core/types/.Box(((std/core/types/Just(((.skip std/core/types/.Box((x: int)) : .Box ) as .box-x49: .Box)) : maybe<int> ) as 
 .pat0: maybe<int>)) : .Box ) as .box-x48: .Box), (.pat1: list<maybe<int>>)) : list<maybe<int>> )
 | std/core/(==.1)((std/core/types/.dup(x)), (std/core/types/.dup(y))) -> val _ : ()
 = std/core/types/.drop(y);
 val _ : ()
 = (match ((std/core/types/.is-unique(xs))) {
 (std/core/types/True() : bool )
 -> val _ : ()
 = std/core/types/.drop(.pat1);
 val _ : ()
 = std/core/types/.dup(x);
 std/core/types/.drop(.box-x48);
 std/core/types/.free(xs);
 _
 -> std/core/types/.dup(x);
 std/core/types/.dec-ref(xs);
 });
 x;
 (std/core/Cons(((.skip std/core/types/.Box(((std/core/types/Nothing() : maybe<int> ) as .pat3: maybe<int>)) : .Box ) as .box-x50: .Box), (.pat4: list<
 maybe<int>>)) : list<maybe<int>> )
 -> val _ : ()
 = std/core/types/.drop(xs, (std/core/int32(3)));
 val _ : ()
 = std/core/types/.drop(y);
 2;
 _
 -> std/core/types/.drop(xs);
 y;
 }
 };
module parc/parc3
import std/core/types = std/core/types = "";
import std/core = std/core = "";
pub fun test : (xs : list<int>, y : int, z : int) -> int
 = fn(xs: list<int>, y: int, z: int){
 match (xs) {
 (std/core/Cons(((.skip std/core/types/.Box((x: int)) : .Box ) as .box: .Box), (.pat: list<int>)) : list<int> )
 | std/core/(==.1)(x, z) -> val _ : ()
 = std/core/types/.drop(z);
 val _ : ()
 = std/core/types/.drop(y);
 val _ : ()
 = (match ((std/core/types/.is-unique(xs))) {
 (std/core/types/True() : bool )
 -> val _ : ()
 = val _ : ()
 = std/core/types/.drop(.pat);
 std/core/types/();
 std/core/types/.free(xs);
 _
 -> val _ : ()
 = val _ : int
 = std/core/types/.dup(x);
 std/core/types/();
 val _ : ()
 = std/core/types/.dec-ref(xs);
 std/core/types/();
 });
 x;
 (std/core/Cons(((.skip std/core/types/.Box((x: int)) : .Box ) as .box: .Box), (.pat: list<int>)) : list<int> )
 | std/core/(==.1)(x, y) -> val _ : ()
 = std/core/types/.drop(z);
 val _ : ()
 = (match ((std/core/types/.is-unique(xs))) {
 (std/core/types/True() : bool )
 -> val _ : ()
 = val _ : ()
 = std/core/types/.drop(.pat);
 val _ : ()
 = std/core/types/.drop(.box);
 std/core/types/();
 std/core/types/.free(xs);
 _
 -> val _ : ()
 = std/core/types/();
 val _ : ()
 = std/core/types/.dec-ref(xs);
 std/core/types/();
 });
 y;
 (std/core/Cons(((.skip std/core/types/.Box((.pat: int)) : .Box ) as .box: .Box), (.pat: list<int>)) : list<int> )
 | std/core/(==.1)(y, z) -> val _ : ()
 = std/core/types/.drop(z);
 val _ : ()
 = std/core/types/.drop(y);
 val _ : ()
 = (match ((std/core/types/.is-unique(xs))) {
 (std/core/types/True() : bool )
 -> val _ : ()
 = val _ : ()
 = std/core/types/.drop(.pat);
 val _ : ()
 = std/core/types/.drop(.box);
 std/core/types/();
 std/core/types/.free(xs);
 _
 -> val _ : ()
 = std/core/types/();
 val _ : ()
 = std/core/types/.dec-ref(xs);
 std/core/types/();
 });
 2;
 _
 -> val _ : ()
 = std/core/types/.drop(z);
 val _ : ()
 = std/core/types/.drop(xs);
 y;
 };
 };
[01;30moperator branch (eager) choice: resume scoped
[00;39;49m[00m[01;30moperator branch (eager) fail: resume never
[00;39;49m[00m[01;30moperator branch (solutions) choice: resume scoped
[00;39;49m[00m[01;30moperator branch (solutions) fail: resume never
[00;39;49m[00m[01;30moperator branch (x) next: resume tail
[00;39;49m[00m[(7,""),(3,"*3"),(1,"+2*3")]
[(7,"")]
.Op-choice : .op-choice
.Op-fail : forall<a> .op-fail<a>
.Op-next : .op-next
.Ops-choice : forall<a> (choice : .op-choice) -> .ops-choice<bool>
.Ops-fail : forall<a,b> (fail : .op-fail<b>) -> .ops-fail<b>
.Ops-next : forall<a> (next : .op-next) -> .ops-next<char>
.tag-choice : string
.tag-fail : string
.tag-next : string
alpha : () -> <choice,fail,next> int
char : (p : (char) -> bool) -> <choice,fail,next> char
choice : () -> choice bool
digit : () -> <choice,fail,next> int
eager : forall<a,e> (action : () -> <choice,fail|e> a) -> e list<a>
expr : () -> <choice,fail,next,div> int
factor : () -> <choice,fail,next,div> int
fail : forall<a> () -> fail a
main : () -> <div,console> ()
many : forall<a,e> (p : () -> <choice,div|e> a) -> <choice,div|e> list<a>
many1 : forall<a,e> (p : () -> <choice,div|e> a) -> <choice,div|e> list<a>
next : () -> next char
number : () -> <choice,fail,next,div> int
or : forall<a,e> (p1 : () -> <choice|e> a, p2 : () -> <choice|e> a) -> <choice|e> a
parse : forall<a,e> (p : () -> <parse|e> a, input : string) -> <choice,fail|e> (a, string)
select : forall<a> (list<a>) -> <choice,fail> a
show-parse : forall<a> (xs : list<(a, string)>, f : (a) -> string) -> string
show-parse-int: (xs : list<(int, string)>) -> string
show-parse-ints: (xs : list<(list<int>, string)>) -> string
solutions : forall<a,e> (action : () -> <choice,fail|e> a) -> e list<a>
symbol : (c : char) -> <choice,fail,next> ()
term : () -> <choice,fail,next,div> int
test1 : () -> <choice,fail,div> (int, string)